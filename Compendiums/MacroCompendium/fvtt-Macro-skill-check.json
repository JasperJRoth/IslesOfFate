{
  "name": "Skill Check",
  "type": "script",
  "author": "4w1xdHWNsRQYYZZR",
  "img": "icons/svg/d20-highlight.svg",
  "scope": "global",
  "command": "if(canvas.tokens.controlled[0]){\n  const data = canvas.tokens.controlled[0].actor.data\n  const cItems = data.data.citems\n\n  function filterSelected(item){\n    return item.groups[0].ikey == \"skill_group\" \n    && item.attributes.is_selected_skill.value == true\n  }\n\n  function filterSkills(item){\n    return item.groups[0].ikey == \"skill_group\" \n  }\n\n  if(cItems.filter(filterSelected).length > 0){\n    let selectedSkill = cItems.filter(filterSelected)[0]\n    relatedPrompt(data, selectedSkill);\n  } else if (cItems.filter(filterSkills).length > 0) {\n    let skills = cItems.filter(filterSkills)\n    let buttons = {}\n\n    for(i = 0; i < skills.length; i++){\n        buttons[i] = {}\n        let newButton = buttons[i]\n        var buttonData = {\n            skill: skills[i],\n            data: data\n        }\n\n        function buttonCallback(){\n            relatedPrompt(this.data, this.skill)\n        }\n\n        newButton.icon = `<i class=\"fas fa-check\"></i>`\n        newButton.label = skills[i].name\n        newButton.callback = buttonCallback.bind(buttonData)\n    }\n\n    let skillPrompt = new Dialog({\n      title: \"Skill Check\",\n      content: \"<p>Please select the skill you would like to roll</p>\",\n      buttons: buttons\n    })\n    \n    skillPrompt.render(true)\n  } else {\n      ui.notifications.warn(\"You do not have any skills. Couldn't be me.\");\n  }\n} else {\n  ui.notifications.warn(\"You do not have a token selected, you absolute dorfus.\");\n}\n\nasync function relatedPrompt(data, skill){\n    let buttonData = {\n        data: data,\n        skillName: skill.name,\n        modifier: skill.attributes.skill_modifier.value\n    }\n\n    function buttonCallback(){\n        makeRoll(this.data, this.skillName, this.modifier)\n    }\n\n    function buttonCallbackPartial(){\n        makeRoll(this.data, this.skillName, Math.floor(this.modifier/2))\n    }\n\n    let relatedPrompt = new Dialog({\n      title: \"Relatedness\",\n      content: \"<p>Please select whether or not your skill is fully relevant to the task.</p>\",\n      buttons: {\n          0: {\n              icon: `<i class=\"fas fa-check\"></i>`,\n              label: \"Fully relevant.\",\n              callback: buttonCallback.bind(buttonData)\n          },\n          1: {\n              icon: `<i class=\"fas fa-check\"></i>`,\n              label: \"Partially relevant.\",\n              callback: buttonCallbackPartial.bind(buttonData)\n          }\n      }\n    })\n    relatedPrompt.render(true)\n}\n\nasync function makeRoll(data, skillName, modifier){\n\n  //let skillName = skill.name\n  //let modifier = skill.attributes.skill_modifier.value\n\n  let roll = await new Roll(`1d20 + @skillBonus`, {skillBonus: modifier})\n\n  await roll.evaluate()\n\n  let rawResult = roll.total - modifier;\n  const critThreshold = data.data.attributes.crit_threshold.value\n\n  let results_html = `\n<div class=\"roll-template\">\n    <div class=\"roll-content\">\n        <div class=\"roll-flexrow\">\n            <img class=\"roll-sender-image\" src=\"${data.img}\" title=\"${data.token.name}\">\n            <div class=\"roll-header roll-flexrow roll-underline\">\n                <h4 class=\"roll-sender-name\">${data.token.name}</h4>\n                <span class=\"roll-delete-button\">\n                    <a class=\"roll-message-delete\"><i class=\"fas fa-trash\"></i></a>\n                </span>\n            </div>\n\n        </div>\n\n\n        <div class=\"roll-flavor\" data-rollname=\"${skillName} Roll\" data-actorid=\"${actor._id}\">\n\n            <div class=\"sbe-info-citemlink\" id=\"${actor._id}\">\n                ${skillName} Roll\n            </div>\n        </div>\n\n        <div class=\"roll-result\">\n            ${roll.total}\n        </div>\n\n        <div class=\"roll-conditional\">${rawResult >= critThreshold ? \"Critical Success!\" : \"\"}</div>\n        <div class=\"roll-conditional\">${rawResult == 1 ? \"Critical Failure...\" : \"\"}</div>\n\n        <div class=\"roll-extra\">\n\n            <div class=\"roll-detail\">\n                <div class=\"roll-area\">\n                    <div class=\"roll-flexrow formula-row\" data-rollexp=\"1d20\">\n                        <label class=\"label-roll\">Formula:</label>\n                        <div class=\"roll-formula\">${roll.formula}</div>\n                    </div>\n                    <div class=\"roll-flexrow modifier-row\">\n                        <label class=\"label-roll\">Modifier:</label>\n                        <div class=\"roll-mod\">${modifier}</div>\n                    </div>\n                    <ol class=\"roll-list regular-rolls\">\n                        <li class=\"roll-flexrow\" data-item-id=\"0\">\n                            <label class=\"label-roll\">1d20:</label>\n                            <div class=\"roll-die regular-die\">${rawResult}</div>\n                        </li>\n                    </ol>\n                    <ol class=\"roll-list sub-rolls\">\n                        <label class=\"label-roll\">Ciritcal Threshold</label>\n                        ${critThreshold}\n                    </ol>\n                </div>\n            </div>\n\n\n\n            <div class=\"roll-flexrow\">\n\n                <a class=\"roll-wbutton\">\n                    <i class=\"roll-detail-button roll-wbutton\">Detail</i>\n                </a>\n                <a class=\"roll-wbutton\">\n                    <i class=\"roll-main-button roll-wbutton\" style=\"display: none;\">Result</i>\n                </a>\n            </div>\n        </div>\n        <div class=\"roll-timestamp message-timestamp\">${formatAMPM(new Date())}</div>\n    </div>\n</div>\n  `\n\n  ChatMessage.create({\n    user: game.user._id,\n    speaker: ChatMessage.getSpeaker({token: actor}),\n    content: results_html,\n    sound: \"sounds/dice.wav\"\n  });\n}\n\nfunction formatAMPM(date) {\n  var hours = date.getHours();\n  var minutes = date.getMinutes();\n  var seconds = date.getSeconds();\n  var ampm = hours >= 12 ? 'pm' : 'am';\n  hours = hours % 12;\n  hours = hours ? hours : 12; // the hour '0' should be '12'\n  minutes = minutes < 10 ? '0'+minutes : minutes;\n  seconds = seconds < 10 ? '0'+seconds : seconds;\n  var strTime = hours + ':' + minutes + ':' + seconds + ' ' + ampm;\n  return strTime;\n}",
  "flags": {
    "exportSource": {
      "world": "isoworld",
      "system": "sandbox",
      "coreVersion": "9.269",
      "systemVersion": "0.13.4"
    }
  }
}